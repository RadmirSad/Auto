//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : CheckClass.sm
//

#ifndef CHECKCLASS_SM_H
#define CHECKCLASS_SM_H


#define SMC_USES_IOSTREAMS

#include "statemap.h"

// Forward declarations.
class CheckClassMap;
class CheckClassMap_FirstWord;
class CheckClassMap_SecondWord;
class CheckClassMap_ThirdWord;
class CheckClassMap_FourthWord;
class CheckClassMap_Functions;
class CheckClassMap_OK;
class CheckClassMap_ErrOfSymb;
class CheckClassMap_EOP;
class CheckClassMap_Default;
class CheckClassState;
class CheckClassContext;
class CheckClass;

class CheckClassState :
    public statemap::State
{
public:

    CheckClassState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(CheckClassContext&) {};
    virtual void Exit(CheckClassContext&) {};

    virtual void Class(CheckClassContext& context);
    virtual void End(CheckClassContext& context);
    virtual void Funcs(CheckClassContext& context);
    virtual void NameOfClass(CheckClassContext& context);
    virtual void Other(CheckClassContext& context);
    virtual void Start(CheckClassContext& context);
    virtual void State(CheckClassContext& context);

protected:

    virtual void Default(CheckClassContext& context);
};

class CheckClassMap
{
public:

    static CheckClassMap_FirstWord FirstWord;
    static CheckClassMap_SecondWord SecondWord;
    static CheckClassMap_ThirdWord ThirdWord;
    static CheckClassMap_FourthWord FourthWord;
    static CheckClassMap_Functions Functions;
    static CheckClassMap_OK OK;
    static CheckClassMap_ErrOfSymb ErrOfSymb;
    static CheckClassMap_EOP EOP;
};

class CheckClassMap_Default :
    public CheckClassState
{
public:

    CheckClassMap_Default(const char * const name, const int stateId)
    : CheckClassState(name, stateId)
    {};

};

class CheckClassMap_FirstWord :
    public CheckClassMap_Default
{
public:
    CheckClassMap_FirstWord(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void Class(CheckClassContext& context);
    virtual void End(CheckClassContext& context);
    virtual void Other(CheckClassContext& context);
};

class CheckClassMap_SecondWord :
    public CheckClassMap_Default
{
public:
    CheckClassMap_SecondWord(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void NameOfClass(CheckClassContext& context);
    virtual void Other(CheckClassContext& context);
};

class CheckClassMap_ThirdWord :
    public CheckClassMap_Default
{
public:
    CheckClassMap_ThirdWord(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void NameOfClass(CheckClassContext& context);
    virtual void Other(CheckClassContext& context);
    virtual void State(CheckClassContext& context);
};

class CheckClassMap_FourthWord :
    public CheckClassMap_Default
{
public:
    CheckClassMap_FourthWord(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void NameOfClass(CheckClassContext& context);
    virtual void Other(CheckClassContext& context);
};

class CheckClassMap_Functions :
    public CheckClassMap_Default
{
public:
    CheckClassMap_Functions(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void Funcs(CheckClassContext& context);
    virtual void Other(CheckClassContext& context);
};

class CheckClassMap_OK :
    public CheckClassMap_Default
{
public:
    CheckClassMap_OK(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void Start(CheckClassContext& context);
};

class CheckClassMap_ErrOfSymb :
    public CheckClassMap_Default
{
public:
    CheckClassMap_ErrOfSymb(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void Start(CheckClassContext& context);
};

class CheckClassMap_EOP :
    public CheckClassMap_Default
{
public:
    CheckClassMap_EOP(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

};

class CheckClassContext :
    public statemap::FSMContext
{
public:

    explicit CheckClassContext(CheckClass& owner)
    : FSMContext(CheckClassMap::FirstWord),
      _owner(owner)
    {};

    CheckClassContext(CheckClass& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline CheckClass& getOwner()
    {
        return (_owner);
    };

    inline CheckClassState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<CheckClassState&>(*_state);
    };

    inline void Class()
    {
        getState().Class(*this);
    };

    inline void End()
    {
        getState().End(*this);
    };

    inline void Funcs()
    {
        getState().Funcs(*this);
    };

    inline void NameOfClass()
    {
        getState().NameOfClass(*this);
    };

    inline void Other()
    {
        getState().Other(*this);
    };

    inline void Start()
    {
        getState().Start(*this);
    };

    inline void State()
    {
        getState().State(*this);
    };

private:
    CheckClass& _owner;
};


#endif // CHECKCLASS_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
