//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : CheckClass.sm
//

#ifndef CHECKCLASS_SM_H
#define CHECKCLASS_SM_H
#define _CRT_SECURE_NO_WARNINGS


#define SMC_USES_IOSTREAMS

#include "statemap.h"

// Forward declarations.
class CheckClassMap;
class CheckClassMap_StartState;
class CheckClassMap_WordClass;
class CheckClassMap_ClassName;
class CheckClassMap_Colon;
class CheckClassMap_Specificator;
class CheckClassMap_ParentClass;
class CheckClassMap_LeftBracket;
class CheckClassMap_RightBracket;
class CheckClassMap_OK;
class CheckClassMap_ErrOfSymb;
class CheckClassMap_EOP;
class CheckClassMap_Default;
class CheckClassState;
class CheckClassContext;
class CheckClass;

class CheckClassState :
    public statemap::State
{
public:

    CheckClassState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(CheckClassContext&) {};
    virtual void Exit(CheckClassContext&) {};

    virtual void Class(CheckClassContext& context, const std::string& cls);
    virtual void DesiredSymb(CheckClassContext& context, const std::string& name);
    virtual void FindBr(CheckClassContext& context, const std::string& str);
    virtual void FindCol(CheckClassContext& context, const std::string& str);
    virtual void NameOfClass(CheckClassContext& context, const std::string& name);
    virtual void NextState(CheckClassContext& context, const std::string& name);
    virtual void NextWd(CheckClassContext& context, const std::string& spec);
    virtual void Start(CheckClassContext& context);

protected:

    virtual void Default(CheckClassContext& context);
};

class CheckClassMap
{
public:

    static CheckClassMap_StartState StartState;
    static CheckClassMap_WordClass WordClass;
    static CheckClassMap_ClassName ClassName;
    static CheckClassMap_Colon Colon;
    static CheckClassMap_Specificator Specificator;
    static CheckClassMap_ParentClass ParentClass;
    static CheckClassMap_LeftBracket LeftBracket;
    static CheckClassMap_RightBracket RightBracket;
    static CheckClassMap_OK OK;
    static CheckClassMap_ErrOfSymb ErrOfSymb;
    static CheckClassMap_EOP EOP;
};

class CheckClassMap_Default :
    public CheckClassState
{
public:

    CheckClassMap_Default(const char * const name, const int stateId)
    : CheckClassState(name, stateId)
    {};

};

class CheckClassMap_StartState :
    public CheckClassMap_Default
{
public:
    CheckClassMap_StartState(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void Class(CheckClassContext& context, const std::string& cls);
    virtual void Default(CheckClassContext& context);
};

class CheckClassMap_WordClass :
    public CheckClassMap_Default
{
public:
    CheckClassMap_WordClass(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void Default(CheckClassContext& context);
    virtual void NameOfClass(CheckClassContext& context, const std::string& name);
};

class CheckClassMap_ClassName :
    public CheckClassMap_Default
{
public:
    CheckClassMap_ClassName(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void Default(CheckClassContext& context);
    virtual void DesiredSymb(CheckClassContext& context, const std::string& name);
};

class CheckClassMap_Colon :
    public CheckClassMap_Default
{
public:
    CheckClassMap_Colon(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void Default(CheckClassContext& context);
    virtual void NextWd(CheckClassContext& context, const std::string& spec);
};

class CheckClassMap_Specificator :
    public CheckClassMap_Default
{
public:
    CheckClassMap_Specificator(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void Default(CheckClassContext& context);
    virtual void NextState(CheckClassContext& context, const std::string& name);
};

class CheckClassMap_ParentClass :
    public CheckClassMap_Default
{
public:
    CheckClassMap_ParentClass(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void Default(CheckClassContext& context);
    virtual void FindBr(CheckClassContext& context, const std::string& str);
};

class CheckClassMap_LeftBracket :
    public CheckClassMap_Default
{
public:
    CheckClassMap_LeftBracket(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void Default(CheckClassContext& context);
    virtual void FindBr(CheckClassContext& context, const std::string& str);
};

class CheckClassMap_RightBracket :
    public CheckClassMap_Default
{
public:
    CheckClassMap_RightBracket(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void Default(CheckClassContext& context);
    virtual void FindCol(CheckClassContext& context, const std::string& str);
};

class CheckClassMap_OK :
    public CheckClassMap_Default
{
public:
    CheckClassMap_OK(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void Start(CheckClassContext& context);
};

class CheckClassMap_ErrOfSymb :
    public CheckClassMap_Default
{
public:
    CheckClassMap_ErrOfSymb(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

    virtual void Start(CheckClassContext& context);
};

class CheckClassMap_EOP :
    public CheckClassMap_Default
{
public:
    CheckClassMap_EOP(const char * const name, const int stateId)
    : CheckClassMap_Default(name, stateId)
    {};

};

class CheckClassContext :
    public statemap::FSMContext
{
public:

    explicit CheckClassContext(CheckClass& owner)
    : FSMContext(CheckClassMap::StartState),
      _owner(owner)
    {};

    CheckClassContext(CheckClass& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline CheckClass& getOwner()
    {
        return (_owner);
    };

    inline CheckClassState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<CheckClassState&>(*_state);
    };

    inline void Class(const std::string& cls)
    {
        getState().Class(*this, cls);
    };

    inline void DesiredSymb(const std::string& name)
    {
        getState().DesiredSymb(*this, name);
    };

    inline void FindBr(const std::string& str)
    {
        getState().FindBr(*this, str);
    };

    inline void FindCol(const std::string& str)
    {
        getState().FindCol(*this, str);
    };

    inline void NameOfClass(const std::string& name)
    {
        getState().NameOfClass(*this, name);
    };

    inline void NextState(const std::string& name)
    {
        getState().NextState(*this, name);
    };

    inline void NextWd(const std::string& spec)
    {
        getState().NextWd(*this, spec);
    };

    inline void Start()
    {
        getState().Start(*this);
    };

private:
    CheckClass& _owner;
};


#endif // CHECKCLASS_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
