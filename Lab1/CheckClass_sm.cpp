//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : CheckClass.sm
//

#include "CheckClass.h"
#include "D:\Program\Auto\Lab1\CheckClass_sm.h"

using namespace statemap;

// Static class declarations.
CheckClassMap_FirstWord CheckClassMap::FirstWord("CheckClassMap::FirstWord", 0);
CheckClassMap_SecondWord CheckClassMap::SecondWord("CheckClassMap::SecondWord", 1);
CheckClassMap_ThirdWord CheckClassMap::ThirdWord("CheckClassMap::ThirdWord", 2);
CheckClassMap_FourthWord CheckClassMap::FourthWord("CheckClassMap::FourthWord", 3);
CheckClassMap_Functions CheckClassMap::Functions("CheckClassMap::Functions", 4);
CheckClassMap_OK CheckClassMap::OK("CheckClassMap::OK", 5);
CheckClassMap_ErrOfSymb CheckClassMap::ErrOfSymb("CheckClassMap::ErrOfSymb", 6);
CheckClassMap_EOP CheckClassMap::EOP("CheckClassMap::EOP", 7);

void CheckClassState::Class(CheckClassContext& context)
{
    Default(context);
}

void CheckClassState::End(CheckClassContext& context)
{
    Default(context);
}

void CheckClassState::Funcs(CheckClassContext& context)
{
    Default(context);
}

void CheckClassState::NameOfClass(CheckClassContext& context)
{
    Default(context);
}

void CheckClassState::Other(CheckClassContext& context)
{
    Default(context);
}

void CheckClassState::Start(CheckClassContext& context)
{
    Default(context);
}

void CheckClassState::State(CheckClassContext& context)
{
    Default(context);
}

void CheckClassState::Default(CheckClassContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void CheckClassMap_FirstWord::Class(CheckClassContext& context)
{

    context.getState().Exit(context);
    context.setState(CheckClassMap::SecondWord);
    context.getState().Entry(context);

}

void CheckClassMap_FirstWord::End(CheckClassContext& context)
{
    CheckClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.SayBye();
        context.setState(CheckClassMap::EOP);
    }
    catch (...)
    {
        context.setState(CheckClassMap::EOP);
        throw;
    }
    context.getState().Entry(context);

}

void CheckClassMap_FirstWord::Other(CheckClassContext& context)
{

    context.getState().Exit(context);
    context.setState(CheckClassMap::ErrOfSymb);
    context.getState().Entry(context);

}

void CheckClassMap_SecondWord::NameOfClass(CheckClassContext& context)
{

    context.getState().Exit(context);
    context.setState(CheckClassMap::ThirdWord);
    context.getState().Entry(context);

}

void CheckClassMap_SecondWord::Other(CheckClassContext& context)
{

    context.getState().Exit(context);
    context.setState(CheckClassMap::ErrOfSymb);
    context.getState().Entry(context);

}

void CheckClassMap_ThirdWord::NameOfClass(CheckClassContext& context)
{

    context.getState().Exit(context);
    context.setState(CheckClassMap::Functions);
    context.getState().Entry(context);

}

void CheckClassMap_ThirdWord::Other(CheckClassContext& context)
{

    context.getState().Exit(context);
    context.setState(CheckClassMap::ErrOfSymb);
    context.getState().Entry(context);

}

void CheckClassMap_ThirdWord::State(CheckClassContext& context)
{

    context.getState().Exit(context);
    context.setState(CheckClassMap::FourthWord);
    context.getState().Entry(context);

}

void CheckClassMap_FourthWord::NameOfClass(CheckClassContext& context)
{

    context.getState().Exit(context);
    context.setState(CheckClassMap::Functions);
    context.getState().Entry(context);

}

void CheckClassMap_FourthWord::Other(CheckClassContext& context)
{

    context.getState().Exit(context);
    context.setState(CheckClassMap::ErrOfSymb);
    context.getState().Entry(context);

}

void CheckClassMap_Functions::Funcs(CheckClassContext& context)
{

    context.getState().Exit(context);
    context.setState(CheckClassMap::OK);
    context.getState().Entry(context);

}

void CheckClassMap_Functions::Other(CheckClassContext& context)
{

    context.getState().Exit(context);
    context.setState(CheckClassMap::ErrOfSymb);
    context.getState().Entry(context);

}

void CheckClassMap_OK::Start(CheckClassContext& context)
{

    context.getState().Exit(context);
    context.setState(CheckClassMap::FirstWord);
    context.getState().Entry(context);

}

void CheckClassMap_ErrOfSymb::Start(CheckClassContext& context)
{

    context.getState().Exit(context);
    context.setState(CheckClassMap::FirstWord);
    context.getState().Entry(context);

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
